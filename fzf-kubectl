#!/bin/sh -

IFS=' 	
'

PATH='/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin'
export PATH

################################################################################

FZF_CMD="fzf --multi -0 -1 --height=100% --header-lines=1 --reverse --inline-info"

#kubectl api-resources --namespaced=false | awk '(header_len){ print substr($0, 0, header_len) } (!header_len){ header_len=index($0, " APIGROUP") }'
#kubectl api-resources --namespaced=false | awk '(name_len){ print substr($0, 0, name_len) } (shortnames_len){ print substr($0, name_len + 1, shortnames_len - name_len - 1) } (!name_len){ name_len=index($0, " SHORTNAMES") } (!shortnames_len){ shortnames_len=index($0, "APIGROUP") }'

CLUSTER_LEVEL_RESOURCES="\
componentstatuses
cs
namespaces
ns
nodes
no
persistentvolumes
pv
mutatingwebhookconfigurations
validatingwebhookconfigurations
customresourcedefinitions
crd
crds
apiservices
tokenreviews
selfsubjectaccessreviews
selfsubjectrulesreviews
subjectaccessreviews
clusterissuers
certificatesigningrequests
csr
ciliumnodes
cn
runtimeclasses
podsecuritypolicies
psp
clusterrolebindings
clusterroles
priorityclasses
pc
volumesnapshotclasses
volumesnapshotcontents
csidrivers
csinodes
storageclasses
sc
volumeattachments
loggings"

usage() {
    cat << EOF
Usage: fzf-kubectl <command> [options]

  Available commands:
    g,  get         Display resources
    d,  describe    Describe resources
    e,  edit        Edit resources
    del,delete      Delete resources
        restart     Restart deployment/statefulset
    l,  logs        Print container logs
        fetch       Copy file from container
        put         Copy file to container
    cm, configmap   Display configmap data
    sec,secret      Decode from b64 and display secret data
    e,  exec        Execute command in container
    rt, root        Run priviliged container
    w,  watch       Watch specific resource
    wn, watchns     Watch all resources in namespace
    ev, events      Display kubernetes events
    tp, top-pods    Display pod resource usage
    tn, top-nodes   Display node resource usage
    ctx,context     Switch context

EOF
}

_print() {
    printf '%s\n' "$@"
}

_k_is_namespaced() {
    resource="$1"

    if printf '%s' "$CLUSTER_LEVEL_RESOURCES" | grep -q "^${resource}s\\{0,1\\}$" ; then
        return 1
    else
        return 0
    fi
}

_k_get_api_resources() {
    kubectl api-resources | ${FZF_CMD} --no-multi | awk '{ print $1 }'
}

_k_get() {
    resource="$1"
    shift

    if [ -z "$resource" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    if _k_is_namespaced "$resource" ; then
        sel_resources=$(kubectl get "$resource" --all-namespaces | ${FZF_CMD} | awk '{ print $1 "|" $2 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl get "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" -o yaml "$@"
        done
    else
        sel_resources=$(kubectl get "$resource" | ${FZF_CMD} | awk '{ print $1 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl get "$resource" "${cur_res}" -o yaml "$@"
        done
    fi
}

_k_describe() {
    resource="$1"
    shift

    if [ -z "$resource" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    if _k_is_namespaced "$resource" ; then
        sel_resources=$(kubectl get "$resource" --all-namespaces | ${FZF_CMD} | awk '{ print $1 "|" $2 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl describe "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
        done
    else
        sel_resources=$(kubectl get "$resource" | ${FZF_CMD} | awk '{ print $1 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl describe "$resource" "${cur_res}" "$@"
        done
    fi
}

_k_edit() {
    resource="$1"

    if [ -z "$resource" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    if _k_is_namespaced "$resource" ; then
        sel_resources=$(kubectl get "$resource" --all-namespaces | ${FZF_CMD} | awk '{ print $1 "|" $2 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl edit "$resource" -n "${cur_res%%|*}" "${cur_res##*|}"
        done
    else
        sel_resources=$(kubectl get "$resource" | ${FZF_CMD} | awk '{ print $1 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl edit "$resource" "${cur_res}"
        done
    fi
}

_k_restart() {
    resource="$1"

    if [ -z "$resource" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    sel_resources=$(kubectl get "$resource" --all-namespaces | ${FZF_CMD} | awk '{ print $1 "|" $2 }')
    if [ -z "$sel_resources" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    for cur_res in $sel_resources ; do
        kubectl rollout restart "$resource" -n "${cur_res%%|*}" "${cur_res##*|}"
    done
}

_k_delete() {
    resource="$1"
    shift

    if [ -z "$resource" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    if _k_is_namespaced "$resource" ; then
        sel_resources=$(kubectl get "$resource" --all-namespaces | ${FZF_CMD} | awk '{ print $1 "|" $2 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl delete "$resource" -n "${cur_res%%|*}" "${cur_res##*|}" "$@"
        done
    else
        sel_resources=$(kubectl get "$resource" | ${FZF_CMD} | awk '{ print $1 }')
        if [ -z "$sel_resources" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi

        for cur_res in $sel_resources ; do
            kubectl delete "$resource" "${cur_res}" "$@"
        done
    fi
}

_k_logs() {
    cur_pod=$(kubectl get pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1, $2 }')

    if [ -z "$cur_pod" ] ; then
        _print 'no pod selected, exiting'
        exit 1
    fi

    cur_cont=$(kubectl get pods -n "${cur_pod%% *}" "${cur_pod##* }" -o=jsonpath='{.spec.containers[*].name}' | tr -s '[:space:]' '\n' | ${FZF_CMD} --header-lines=0)
    if [ -z "$cur_cont" ] ; then
        _print 'no container selected, exiting'
        exit 1
    fi

    for cont in $cur_cont ; do
        kubectl -n "${cur_pod%% *}" logs "${cur_pod##* }" -c "${cont}" "$@"
    done
}

_k_fetch() {
    sel_pod=$(kubectl get pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1, $2 }')

    if [ -z "$sel_pod" ] ; then
        _print 'no pod selected, exiting'
        exit 1
    fi

    sel_cont=$(kubectl get pods -n "${sel_pod%% *}" "${sel_pod##* }" -o=jsonpath='{.spec.containers[*].name}' | tr -s '[:space:]' '\n' | ${FZF_CMD} --no-multi --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        _print 'no container selected, exiting'
        exit 1
    fi

    kubectl -n "${sel_pod%% *}" cp "${sel_pod##* }":"$1" "$2" -c "${sel_cont}"
}

_k_put() {
    sel_pod=$(kubectl get pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1, $2 }')

    if [ -z "$sel_pod" ] ; then
        _print 'no pod selected, exiting'
        exit 1
    fi

    sel_cont=$(kubectl get pods -n "${sel_pod%% *}" "${sel_pod##* }" -o=jsonpath='{.spec.containers[*].name}' | tr -s '[:space:]' '\n' | ${FZF_CMD} --no-multi --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        _print 'no container selected, exiting'
        exit 1
    fi

    kubectl -n "${sel_pod%% *}" cp "$1" "${sel_pod##* }":"$2" -c "${sel_cont}"
}

_k_exec() {
    if [ -z "$1" ] ; then
        _print 'no command to execute, exiting'
        exit 3
    fi

    sel_pod=$(kubectl get pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $2 }')
    if [ -z "$sel_pod" ] ; then
        _print 'no pod selected, exiting'
        exit 1
    fi

    sel_cont=$(kubectl get pods -o=jsonpath='{.spec.containers[*].name}' -n "${sel_pod%%|*}" "${sel_pod##*|}" | tr -s '[:space:]' '\n' | ${FZF_CMD} --header-lines=0)
    if [ -z "$sel_cont" ] ; then
        _print 'no container selected, exiting'
        exit 1
    fi

    for cur_cont in $sel_cont ; do
        kubectl -n "${sel_pod%%|*}" exec -it "${sel_pod##*|}" -c "$cur_cont" -- "$@"
    done
}

_k_port_forward() {
    port="$1"
    shift

    if [ -z "$port" ] ; then
        _print 'no port selected, exiting'
        exit 1
    fi

    sel_pod=$(kubectl get pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $2 }')
    if [ -z "$sel_pod" ] ; then
        _print 'no pod selected, exiting'
        exit 1
    fi

    kubectl port-forward -n "${sel_pod%%|*}" "${sel_pod##*|}" "$port" "$@"
}

_k_configmap() {
    sel_cm=$(kubectl get configmaps --all-namespaces | ${FZF_CMD} | awk '{ print $1 "|" $2}')

    if [ -z "$sel_cm" ] ; then
        _print 'no configmap selected, exiting'
        exit 1
    fi

    for cur_cm in $sel_cm ; do
        kubectl get configmap -n "${cur_cm%%|*}" "${cur_cm##*|}" -o json | jq -r '.data | to_entries[] | "\(.key): \(.value)"'
    done
}

_k_sec() {
    sel_sec=$(kubectl get secrets --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $2}')

    if [ -z "$sel_sec" ] ; then
        _print 'no secret selected, exiting'
        exit 1
    fi

    sel_key=$(kubectl get secret -n "${sel_sec%%|*}" "${sel_sec##*|}" -o json | jq -r '.data | to_entries[] | "\(.key)"' | ${FZF_CMD} --header-lines=0)

    if [ -z "$sel_key" ] ; then
        _print 'no key selected, exiting'
        exit 1
    fi

    for cur_key in $sel_key ; do
        kubectl get secret -n "${sel_sec%%|*}" "${sel_sec##*|}" -o json | jq -r ".data.\"${cur_key}\"" | base64 -d
        _print ''
    done
}

_k_run() {
    image="$1"

    sel_node=$(kubectl top nodes | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_node" ] ; then
        _print 'no node selected, exiting'
        exit 1
    fi

    sel_ns=$(kubectl get ns | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_ns" ] ; then
        _print 'no namespace selected, exiting'
        exit 1
    fi

    _print "enter pod name:"
    IFS= read -r sel_name
    if [ -z "$sel_name" ] ; then
        _print 'no name entered, exiting'
        exit 1
    fi

    spec='
    {
        "spec": {
            "nodeSelector": {
                "kubernetes.io/hostname": "'$sel_node'"
            },
            "tolerations": [
                {
                    "operator": "Exists"
                }
            ]
        }
    }
    '

    kubectl run "$sel_name" -n "$sel_ns" --rm -it --image "$image" --overrides="$spec"
}

_k_root() {
    sel_node=$(kubectl top nodes | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_node" ] ; then
        _print 'no node selected, exiting'
        exit 1
    fi

    sel_ns=$(kubectl get ns | ${FZF_CMD} --no-multi | awk '{ print $1 }')
    if [ -z "$sel_ns" ] ; then
        _print 'no namespace selected, exiting'
        exit 1
    fi

    _print "enter pod name:"
    IFS= read -r sel_name
    if [ -z "$sel_name" ] ; then
        _print 'no name entered, exiting'
        exit 1
    fi

    spec='
    {
        "spec": {
            "hostPID": true,
            "hostNetwork": true,
            "containers": [
                {
                    "name": "'$sel_name'",
                    "image": "alpine",
                    "command": [
                        "/bin/sh"
                    ],
                    "args": [
                        "-c",
                        "nsenter -t 1 -m -u -i -n -p -- bash"
                    ],
                    "resources": null,
                    "stdin": true,
                    "stdinOnce": true,
                    "terminationMessagePath": "/dev/termination-log",
                    "terminationMessagePolicy": "File",
                    "tty": true,
                    "securityContext": {
                        "privileged": true
                    }
                }
            ],
            "nodeSelector": {
                "kubernetes.io/hostname": "'$sel_node'"
            }
        }
    }
    '

    kubectl run "$sel_name" -n "$sel_ns" --rm -it --image alpine --overrides="$spec"
}

_k_watch() {
    resource="$1"
    shift

    if [ -z "$resource" ] ; then
        _print 'no resources selected, exiting'
        exit 1
    fi

    if _k_is_namespaced "$resource" ; then
        sel_res=$(kubectl get "$resource" --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $2 }')
        if [ -z "$sel_res" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi
        watch -n 2 kubectl get "$resource" -n "${sel_res%%|*}" "${sel_res##*|}" "$@"
    else
        sel_res=$(kubectl get "$resource" | ${FZF_CMD} | awk -v ORS=' ' '{ print $1 }')
        if [ -z "$sel_res" ] ; then
            _print 'no resources selected, exiting'
            exit 1
        fi
        watch -n 2 kubectl get "$resource" "$sel_res" "$@"
    fi
}

_k_watch_ns() {
    sel_ns=$(kubectl get ns | ${FZF_CMD} --no-multi | awk '{ print $1 }')

    if [ -z "$sel_ns" ] ; then
        _print 'no namespace selected, exiting'
        exit 1
    fi

    watch -n 2 kubectl -n "$sel_ns" get all "$@"
}

_k_events() {
    sel_event=$(kubectl get events --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $5 }')

    if [ -z "$sel_event" ] ; then
        _print 'no event selected, exiting'
        exit 1
    fi

    kubectl describe -n "${sel_event%%|*}" "${sel_event##*|}"
}

_k_top_pods() {
    sel_pod=$(kubectl top pods --all-namespaces | ${FZF_CMD} --no-multi | awk '{ print $1 "|" $2 }')

    if [ -z "$sel_pod" ] ; then
        _print 'no pod selected, exiting'
        exit 1
    fi

    kubectl describe pod  -n "${sel_pod%%|*}" "${sel_pod##*|}"
}

_k_top_nodes() {
    sel_node=$(kubectl top nodes | ${FZF_CMD} --no-multi | awk '{ print $1 }')

    if [ -z "$sel_node" ] ; then
        _print 'no node selected, exiting'
        exit 1
    fi

    kubectl describe node "$sel_node"
}

_k_context() {
    sel_context=$(kubectl config get-contexts -o name | ${FZF_CMD} --no-multi --header-lines=0 )

    if [ -z "$sel_context" ] ; then
        _print 'no context selected, exiting'
        exit 1
    fi

    kubectl config use-context "$sel_context"
}

if [ "$1" = "--verbose" ] || [ "$1" = "-v" ] ; then
    set -x
    shift
fi

if [ "$#" -eq 0 ] ; then
    usage
    exit 0
fi

action=$1
shift

case "$action" in
    "get" | "g")
        if [ "$#" -eq 0 ] ; then
            set -- "$(_k_get_api_resources)"
        fi
        _k_get "$@"
    ;;
    "describe" | "d")
        if [ "$#" -eq 0 ] ; then
            set -- "$(_k_get_api_resources)"
        fi
        _k_describe "$@"
    ;;
    "edit" | "e")
        if [ "$#" -eq 0 ] ; then
            set -- "$(_k_get_api_resources)"
        fi
        _k_edit "$@"
    ;;
    "run")
        _k_run "$@"
    ;;
    "root" | "rt")
        _k_root "$@"
    ;;
    "delete" | "del")
        if [ "$#" -eq 0 ] ; then
            set -- "$(_k_get_api_resources)"
        fi
        _k_delete "$@"
    ;;
    "restart")
        if [ "$#" -eq 0 ] ; then
            set -- "$(_k_get_api_resources)"
        fi
        _k_restart "$@"
    ;;
    "logs" | "l")
        _k_logs "$@"
    ;;
    "fetch")
        _k_fetch "$@"
    ;;
    "put")
        _k_put "$@"
    ;;
    "exec" | "ex")
        _k_exec "$@"
    ;;
    "port-forward" | "pf")
        _k_port_forward "$@"
    ;;
    "configmap" | "cm")
        _k_configmap
    ;;
    "secret" | "sec")
        _k_sec
    ;;
    "watch" | "w")
        if [ "$#" -eq 0 ] ; then
            set -- "$(_k_get_api_resources)"
        fi
        _k_watch "$@"
    ;;
    "watchns" | "wn")
        _k_watch_ns "$@"
    ;;
    "events" | "ev")
        _k_events
    ;;
    "top-pods" | "tp")
        _k_top_pods
    ;;
    "top-nodes" | "tn")
        _k_top_nodes
    ;;
    "context" | "ctx")
        _k_context
    ;;
    *)
        _print 'unknown action, exiting'
        usage
        exit 1
    ;;
esac
